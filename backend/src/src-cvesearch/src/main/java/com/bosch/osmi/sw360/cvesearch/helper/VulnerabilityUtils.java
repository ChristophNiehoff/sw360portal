/*
 * Copyright (c) Bosch Software Innovations GmbH 2016.
 * Part of the SW360 Portal Project.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.bosch.osmi.sw360.cvesearch.helper;

import com.siemens.sw360.datahandler.common.CommonUtils;
import com.siemens.sw360.datahandler.thrift.RequestStatus;
import com.siemens.sw360.datahandler.thrift.cvesearch.UpdateType;
import com.siemens.sw360.datahandler.thrift.cvesearch.VulnerabilityUpdateStatus;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.Vulnerability;

import java.util.*;
import java.util.stream.Collectors;

import static com.siemens.sw360.datahandler.common.CommonUtils.nullToEmptyList;

public class VulnerabilityUtils {

    public static VulnerabilityUpdateStatus getEmptyVulnerabilityUpdateStatus(RequestStatus requestStatus){
        VulnerabilityUpdateStatus status = new VulnerabilityUpdateStatus();
        status.statusToVulnerabilityIds = new HashMap<>();
        for(UpdateType updateType: UpdateType.values()){
            status.statusToVulnerabilityIds.put(updateType, new ArrayList<>());
        }
        status.requestStatus = requestStatus;
        return status;
    }

    public static VulnerabilityUpdateStatus getEmptyVulnerabilityUpdateStatus(){
        Map<UpdateType, List<String>> updateTypeToExternalID = new HashMap<>();
        for (UpdateType updateType: UpdateType.values()){
            updateTypeToExternalID.put(updateType, new ArrayList<>());
        }
        return new VulnerabilityUpdateStatus()
                .setRequestStatus(RequestStatus.SUCCESS)
                .setStatusToVulnerabilityIds(updateTypeToExternalID);
    }

    public static VulnerabilityUpdateStatus reduceVulnerabilityUpdateStatus(VulnerabilityUpdateStatus ... statuses){
        VulnerabilityUpdateStatus resultStatus = getEmptyVulnerabilityUpdateStatus();

        RequestStatus requestStatus = Arrays.stream(statuses)
                .map(VulnerabilityUpdateStatus::getRequestStatus)
                .reduce(RequestStatus.SUCCESS, CommonUtils::reduceRequestStatus);
        resultStatus.setRequestStatus(requestStatus);

        for(UpdateType updateType : UpdateType.values()) {
            for (VulnerabilityUpdateStatus status : statuses) {
                if(status.isSetStatusToVulnerabilityIds()) {
                    resultStatus.statusToVulnerabilityIds.get(updateType)
                            .addAll(nullToEmptyList(status.statusToVulnerabilityIds.get(updateType)));
                }
            }
        }
        return resultStatus;
    }

    public static VulnerabilityUpdateStatus getUpdateStatusFromUpdateMap(Map<UpdateType, List<Vulnerability>> statusToVulnerabilities){
        VulnerabilityUpdateStatus status = getEmptyVulnerabilityUpdateStatus();
        status.requestStatus = nullToEmptyList(statusToVulnerabilities.get(UpdateType.FAILED)).size() > 0
                ? RequestStatus.FAILURE
                : RequestStatus.SUCCESS;

        for(UpdateType updateType: UpdateType.values()){
            List<String> idList = nullToEmptyList(statusToVulnerabilities.get(updateType))
                    .stream()
                    .map(Vulnerability::getExternalId)
                    .collect(Collectors.toList());
            status.statusToVulnerabilityIds.get(updateType).addAll(idList);
        }
        return status;
    }

    public static List<String> successIdsFromUpdateMap(Map<UpdateType, List<Vulnerability>> updateMap){
        List<String> totalList = new ArrayList<>();

        totalList.addAll(nullToEmptyList(updateMap.get(UpdateType.NEW)).stream().map(Vulnerability::getId).collect(Collectors.toList()));
        totalList.addAll(nullToEmptyList(updateMap.get(UpdateType.UPDATED)).stream().map(Vulnerability::getId).collect(Collectors.toList()));
        totalList.addAll(nullToEmptyList(updateMap.get(UpdateType.OLD)).stream().map(Vulnerability::getId).collect(Collectors.toList()));

        return totalList;
    }
}
