/*
 * Copyright (c) Bosch Software Innovations GmbH 2016.
 * Part of the SW360 Portal Project.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License Version 2.0 as published by the
 * Free Software Foundation with classpath exception.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License version 2.0 for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program (please see the COPYING file); if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
package com.bosch.osmi.sw360.cvesearch.datasink;

import com.siemens.sw360.datahandler.thrift.RequestStatus;
import com.siemens.sw360.datahandler.thrift.cvesearch.UpdateType;
import com.siemens.sw360.datahandler.thrift.vulnerabilities.Vulnerability;
import com.siemens.sw360.vulnerabilities.db.VulnerabilityDatabaseHandler;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.*;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;


@RunWith(MockitoJUnitRunner.class)
public class VulnerabilityConnectorTest {
    Map<UpdateType, List<Vulnerability>> statusToVulnerabilityMap;

    @Mock
    VulnerabilityDatabaseHandler vulnerabilityDatabaseHandler;

    @InjectMocks
    VulnerabilityConnector vulnerabilityConnector;

    @Before
    public void setUp() throws Exception{
        statusToVulnerabilityMap = new HashMap<>();
        for (UpdateType updateType: UpdateType.values()){
            statusToVulnerabilityMap.put(updateType, new ArrayList<>());
        }
    }

    @Test
    public void testAddOrUpdateVulnerabilityAndSetIdOldVulnerability() throws Exception {
        Vulnerability v1 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv1").setExternalId("eid");
        Vulnerability v2 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv2").setExternalId("eid");

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid")).thenReturn(v1);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilityAndSetId(v2, statusToVulnerabilityMap);

        assertThat(resultMap.get(UpdateType.OLD).get(0).getId(), is("idv1"));
        assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testAddOrUpdateVulnerabilityAndSetIdNewVulnerability() throws Exception {
        Vulnerability v1 = new Vulnerability().setId("idv1").setExternalId("eid");

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid")).thenReturn(null);
        when(vulnerabilityDatabaseHandler.add(v1)).thenReturn(RequestStatus.SUCCESS);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilityAndSetId(v1, statusToVulnerabilityMap);

        assertThat(resultMap.get(UpdateType.NEW).get(0).getId(), is("idv1"));
        assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testAddOrUpdateVulnerabilityAndSetIdUpdateVulnerability() throws Exception {
        Vulnerability v1 = new Vulnerability().setLastExternalUpdate("31-12-1999").setId("idv1").setExternalId("eid");
        Vulnerability v2 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv2").setExternalId("eid");

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid")).thenReturn(v1);
        when(vulnerabilityDatabaseHandler.update(v1)).thenReturn(RequestStatus.SUCCESS);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilityAndSetId(v2, statusToVulnerabilityMap);

        assertThat(resultMap.get(UpdateType.UPDATED).get(0).getId(), is("idv1"));
        assertThat(resultMap.get(UpdateType.UPDATED).get(0).getLastExternalUpdate(), is("01-01-2000"));
        assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testAddOrUpdateVulnerabilityAndSetIdFailAdd() throws Exception {
        Vulnerability v1 = new Vulnerability().setLastExternalUpdate("31-12-1999").setId("idv1").setExternalId("eid");
        Vulnerability v2 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv2").setExternalId("eid");

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid")).thenReturn(v1);
        when(vulnerabilityDatabaseHandler.update(v1)).thenReturn(RequestStatus.FAILURE);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilityAndSetId(v2, statusToVulnerabilityMap);

        assertThat(resultMap.get(UpdateType.FAILED).get(0).getId(), is("idv2"));
        assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testAddOrUpdateVulnerabilityAndSetIdFailUpdate() throws Exception {
        Vulnerability v2 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv2").setExternalId("eid");

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid")).thenReturn(null);
        when(vulnerabilityDatabaseHandler.add(v2)).thenReturn(RequestStatus.FAILURE);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilityAndSetId(v2, statusToVulnerabilityMap);

        assertThat(resultMap.get(UpdateType.FAILED).get(0).getId(), is("idv2"));
        assertThat(resultMap.get(UpdateType.NEW), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.OLD), is(Collections.EMPTY_LIST));
        assertThat(resultMap.get(UpdateType.UPDATED), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testaddOrUpdateVulnerabilitiesAndSetIds(){
        Vulnerability v1 = new Vulnerability().setLastExternalUpdate("31-12-1999").setId("idv1").setExternalId("eid1");
        Vulnerability v2 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv2").setExternalId("eid2");
        Vulnerability v3= new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv3").setExternalId("eid1");
        Vulnerability v4 = new Vulnerability().setLastExternalUpdate("01-01-2000").setId("idv4").setExternalId("eid2");
        Vulnerability v5 = new Vulnerability().setLastExternalUpdate("31-12-1999").setId("idv5").setExternalId("eid5");

        List<Vulnerability> vulnerabilityList = Arrays.asList(v3,v4,v5);

        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid1")).thenReturn(v1);
        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid2")).thenReturn(v2);
        when(vulnerabilityDatabaseHandler.getByExternalId(Vulnerability.class, "eid5")).thenReturn(null);
        when(vulnerabilityDatabaseHandler.add(v5)).thenReturn(RequestStatus.SUCCESS);
        when(vulnerabilityDatabaseHandler.update(v1)).thenReturn(RequestStatus.SUCCESS);

        Map<UpdateType, List<Vulnerability>> resultMap = vulnerabilityConnector.addOrUpdateVulnerabilitiesAndSetIds(vulnerabilityList);

        assertThat(resultMap.get(UpdateType.UPDATED).get(0).getId(), is("idv1"));
        assertThat(resultMap.get(UpdateType.NEW).get(0).getId(), is("idv5"));
        assertThat(resultMap.get(UpdateType.OLD).get(0).getId(), is("idv2"));
        assertThat(resultMap.get(UpdateType.FAILED), is(Collections.EMPTY_LIST));

    }
}
