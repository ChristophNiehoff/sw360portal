<%--
  ~ Copyright (c) Bosch Software Innovations GmbH 2016.
  ~
  ~ All rights reserved. This program and the accompanying materials
  ~ are made available under the terms of the Eclipse Public License v1.0
  ~ which accompanies this distribution, and is available at
  ~ http://www.eclipse.org/legal/epl-v10.html
  --%>
<%@ page import="org.eclipse.sw360.portal.common.PortalConstants" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.RequestStatus" %>

<script>
    function displayResponse(response) {
        if(response.<%=PortalConstants.REQUEST_STATUS%> !== '<%=PortalConstants.RESPONSE__IMPORT_GENERAL_FAILURE%>'){
            var failedItems = "";
            var newItems="";
            var updateItems="";
            var statusText="";
            var msgText="";

            switch(response.<%=PortalConstants.REQUEST_STATUS%>) {
                case '<%=RequestStatus.SUCCESS%>':
                    statusText = "Vulnerabilities updated successfully.";
                    break;
                case '<%=RequestStatus.FAILURE%>':
                    statusText = "There were some failures.";
                    break;
                default:
            }

            if (response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%>.length != 0) {
                failedItems = '<li><b class="alert">' +
                        response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%>.length +
                        ' vulnerability/ies could not be imported: </b>' +
                        "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%> + "</div></li>";
            }
            if (response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%>.length != 0) {
                newItems = '<li><b>' +
                        response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%>.length +
                        ' vulnerability/ies added: </b>' +
                        "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%> + "</div></li>";
            }
            if (response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%>.length != 0) {
                updateItems = '<li><b>' +
                        response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%>.length +
                        ' vulnerability/ies updated: </b>' +
                        "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%> + "</div></li>";
            }

            if (newItems === "" && updateItems === "") {
                msgText = "No changes were necessary.";
            }else{
                msgText="Please reload to see the results.";
            }

            showStatusPopup('<ul>' + failedItems + newItems + updateItems + '</ul>' + msgText, modal, statusText);

        }else{
            showStatusPopup("Maybe the cve-search server was not reachable.", modal, "The update failed.");
        }

    }

    function createModalWithInput(vulnerabilityId, oldValue, newValue, releaseId) {
        var inputmodal;
        var inputcomment;
        AUI().use(
                'aui-modal',
                function (Y) {
                    inputmodal = new Y.Modal(
                            Object.assign({
                                bodyContent:'<textarea class="vulnerabilityRatingCommentArea" id="commentInput" name="<portlet:namespace/>comment" type="text" placeholder="Enter comment" />',
                                centered: true,
                                destroyOnHide: true,
                                modal: true,
                                render: '#vulnerabilityModal',
                                width: 450,
                                height: 500
                            })
                    );
                    inputmodal.setHeader = function (content) {
                        this.set('headerContent', '<h5>' + content + '</h5>');
                    };
                    inputmodal.addToolbar([
                        {
                            label: 'Cancel',
                            on: {
                                click: function () {
                                    cancelRatingChange(oldValue);
                                    inputmodal.hide();
                                }
                            }
                        },
                        {
                            label: 'OK',
                            on: {
                                click: function () {
                                    inputcomment = document.getElementById("commentInput").value;
                                    if(releaseId !== undefined) {
                                        executeRatingChange(vulnerabilityId, newValue, inputcomment, oldValue, releaseId);
                                    } else {
                                        executeRatingChange(vulnerabilityId, newValue, inputcomment, oldValue);
                                    }
                                    inputmodal.hide();
                                }
                            }
                        }
                    ]);
                    inputmodal.render();
                    Y.one('body').on('key', function(event) {
                        inputmodal.once('visibleChange', function(event) {
                            if (event.prevVal === true) {
                                event.newVal = true;
                            }
                        });
                    }, 'esc');
                }
        );
        return inputmodal;
    }
</script>
