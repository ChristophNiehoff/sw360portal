<%--
  ~ Copyright (c) Bosch Software Innovations GmbH 2016.
  ~
  ~ All rights reserved. This program and the accompanying materials
  ~ are made available under the terms of the Eclipse Public License v1.0
  ~ which accompanies this distribution, and is available at
  ~ http://www.eclipse.org/legal/epl-v10.html
  --%>
<%@ page import="com.siemens.sw360.portal.common.PortalConstants" %>

<script>
    function displayResponse(response) {
        var failedText = "";
        var newText="";
        var updateText="";
        var noChangesText="";
        var reloadText="Please reload to see the results.";
        var statusText = "";
        if(response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%>.length != 0) {
            failedText = '<li><b>' +
                    response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%>.length +
                    '&nbsp vulnerability/ies could not be imported: </b>' +
                    "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__FAILED_IDS%> + "</div></li>";
        }
        if(response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%>.length != 0) {
            newText = '<li><b>' +
                    response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%>.length +
                    '&nbsp vulnerability/ies added: </b>' +
                    "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__NEW_IDS%> + "</div></li>";
        }
        if(response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%>.length != 0) {
            updateText = '<li><b>' +
                    response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%>.length +
                    '&nbsp vulnerability/ies updated: </b>' +
                    "<div>" + response.<%=PortalConstants.UPDATE_VULNERABILITIES__UPDATED_IDS%> + "</div></li>";
        }
        if(newText === "" && updateText === ""){
            noChangesText = "No changes were necessary.";
            reloadText = "";
        }
        switch(response.<%=PortalConstants.REQUEST_STATUS%>) {
            case '<%=RequestStatus.SUCCESS%>':
                statusText = "Vulnerabilities updated successfully.";
                break;
            case '<%=RequestStatus.FAILURE%>':
                statusText = "There were some failures.";
                break;
            case '<%=PortalConstants.RESPONSE__IMPORT_GENERAL_FAILURE%>':
                statusText = "The update failed.";
                break;
            default:
        }
        showStatusPopup('<ul>' +
                         failedText +
                         newText +
                         updateText +
                        '</ul>' +
                        noChangesText +
                        '<br>' +
                        reloadText, modal, statusText);

    }

    function createModalWithInput(vulnerabilityId, oldValue, newValue, releaseId) {
        var inputmodal;
        var inputcomment;
        AUI().use(
                'aui-modal',
                function (Y) {
                    inputmodal = new Y.Modal(
                            Object.assign({
                                bodyContent:'<textarea class="vulnerabilityRatingCommentArea" id="commentInput" name="<portlet:namespace/>comment" type="text" placeholder="Enter comment" />',
                                centered: true,
                                destroyOnHide: true,
                                modal: true,
                                render: '#vulnerabilityModal',
                                width: 450,
                                height: 500
                            })
                    );
                    inputmodal.setHeader = function (content) {
                        this.set('headerContent', '<h5>' + content + '</h5>');
                    };
                    inputmodal.addToolbar([
                        {
                            label: 'Cancel',
                            on: {
                                click: function () {
                                    cancelRatingChange(oldValue);
                                    inputmodal.hide();
                                }
                            }
                        },
                        {
                            label: 'OK',
                            on: {
                                click: function () {
                                    inputcomment = document.getElementById("commentInput").value;
                                    if(releaseId !== undefined) {
                                        executeRatingChange(vulnerabilityId, newValue, inputcomment, oldValue, releaseId);
                                    } else {
                                        executeRatingChange(vulnerabilityId, newValue, inputcomment, oldValue);
                                    }
                                    inputmodal.hide();
                                }
                            }
                        }
                    ]);
                    inputmodal.render();
                    Y.one('body').on('key', function(event) {
                        inputmodal.once('visibleChange', function(event) {
                            if (event.prevVal === true) {
                                event.newVal = true;
                            }
                        });
                    }, 'esc');
                }
        );
        return inputmodal;
    }
</script>
